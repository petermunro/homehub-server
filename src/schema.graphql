schema {
  query: Query
  mutation: Mutation
}

type Query {
  system: System!
  accessories(offset: Int, limit: Int, type: String): [Accessory]!
}

type Mutation {
  setHubname(name: String!): System!
  addLight(light: LightInput!): Light!
}

input LightInput {
  name: String!
  manufacturer: String!
}

type System {
  "A 'hello world' field"
  hello: String
  "Returns the uptime of this server/hub"
  uptime: String!
  uptimeDelayed: String!
  hubname: String!
}

interface Accessory {
  id: ID!
  name: String!
}

# union Accessory = Light | Door | Thermostat | Outlet

type Light implements Accessory {
  id: ID!
  name: String!
  brightnessLevel: Int!
  manufacturer: String!
}

type Door implements Accessory {
  id: ID!
  name: String!
  isClosed: Boolean!
  isLocked: Boolean!
}

type Thermostat implements Accessory {
  id: ID!
  name: String!
  temperature: Float!
}

type Outlet implements Accessory {
  id: ID!
  name: String!
  isOn: Boolean!
}
